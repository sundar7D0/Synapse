# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_DRAM', [dirname(__file__)])
        except ImportError:
            import _DRAM
            return _DRAM
        if fp is not None:
            try:
                _mod = imp.load_module('_DRAM', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _DRAM = swig_import_helper()
    del swig_import_helper
else:
    import _DRAM
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class rv(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rv, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rv, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id"] = _DRAM.rv_id_set
    __swig_getmethods__["id"] = _DRAM.rv_id_get
    if _newclass:
        id = _swig_property(_DRAM.rv_id_get, _DRAM.rv_id_set)
    __swig_setmethods__["addr"] = _DRAM.rv_addr_set
    __swig_getmethods__["addr"] = _DRAM.rv_addr_get
    if _newclass:
        addr = _swig_property(_DRAM.rv_addr_get, _DRAM.rv_addr_set)
    __swig_setmethods__["clock_cycle"] = _DRAM.rv_clock_cycle_set
    __swig_getmethods__["clock_cycle"] = _DRAM.rv_clock_cycle_get
    if _newclass:
        clock_cycle = _swig_property(_DRAM.rv_clock_cycle_get, _DRAM.rv_clock_cycle_set)

    def __init__(self):
        this = _DRAM.new_rv()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _DRAM.delete_rv
    __del__ = lambda self: None
rv_swigregister = _DRAM.rv_swigregister
rv_swigregister(rv)

class Memifc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Memifc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Memifc, name)
    __repr__ = _swig_repr

    def __init__(self, arg2, arg3, arg4, arg5, arg6):
        this = _DRAM.new_Memifc(arg2, arg3, arg4, arg5, arg6)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def request(self, arg2, arg3):
        return _DRAM.Memifc_request(self, arg2, arg3)

    def update(self, arg2):
        return _DRAM.Memifc_update(self, arg2)

    def get_current_time(self):
        return _DRAM.Memifc_get_current_time(self)

    def read_response(self):
        return _DRAM.Memifc_read_response(self)

    def write_response(self):
        return _DRAM.Memifc_write_response(self)
    __swig_destroy__ = _DRAM.delete_Memifc
    __del__ = lambda self: None
Memifc_swigregister = _DRAM.Memifc_swigregister
Memifc_swigregister(Memifc)

# This file is compatible with both classic and new-style classes.


